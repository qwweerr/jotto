
CS349 ASSIGNMENT 3: JOTTO! (Model-View-Controller, Java)
TA: Haiyu

GUIDELINES
The assignment needs to compile and run in order for the TA to mark it. If it 
doesn't compile, but the TA is able to get it working, you will only lose marks
for the "Deliverables" section. If they cannot get it to compile, you 
receive zero for the assignment.

The marking scheme below awards marks based on successful completion of the 
requirements. Note that severely deviating from the requirements may result 
in penalties that aren't listed below (i.e. you can't write a Java assignment 
in C++/OpenGL and receive a full-grade, even if you've otherwise met the 
requirements). 

There are 110 marks available, but the assignment is graded out of 100.

TOTAL: 
87/100 

SECTION 1: FEATURES AND GAMEPLAY (40 marks)
SUBTOTAL: 35/40

DELIVERABLES (10)
(5/5) 'make run' compiles and runs the program. README.txt contains any 
required information.
(0/5) User can specify a target word for testing (command-line, or any other 
mechanism is fine).

GAMEPLAY (30)
(5/5) The gameboard is displayed as specified, with Word, Exact and Partial 
matches. The game board is cleared at the start of a round, and filled out 
as a game progresses.
(10/10) Players can play a game of Jotto, using the rules described. The word 
is chosen randomly from the supplied dictionary, and players can make guesses 
using dictionary words. Exact and Partial matches are filled correctly based 
on their guess. 
(5/5) The game ends when the player guesses correctly, runs out of some number 
of guesses (typically 10, though this may vary), or quits the game.
(10/10) Appropriate user feedback is provided for: invalid entries (e.g. symbols 
instead of characters, or an invalid word that isn't in the dictionary), and
game completion (e.g. winning, or running out of turns).

SECTION 2: ENHANCEMENT (30 marks)
SUBTOTAL: 15/30
(15/30) A set of one or more enhancements is implemented (significant effort and
addition to the game is required for full marks).

SECTION 3: MVC ARCHITECTURE AND IMPLEMENTATION (40 marks)
SUBTOTAL: 37/40

MODEL-VIEW-CONTROLLER & USER INTERFACE (25)
(5/5) Model and views are instantiated by a main application. 
(10/10) A single model contains game-state, and views register themselves with 
this model. The model performs any required game-state validation and pushes 
updates to views (by using a common update() method that all of the views
implement). The model is the sole source for game state updates.
(5/5) At least three views are instantiated by the main application; views 
register themselves with the model, and the model calls some update() method to 
tell the views to refresh based on model changes. 
(5/5)  Controllers update the model and not the views (i.e. data being entered
may be shown, but the other views are only updated by the model after data is 
validated).

LAYOUT (15)
(5/5) Java Swing toolkit is used, and at least one JTable or JTree is included 
in the interface.
(5/5) Nested layout managers have been used to arrange the widgets using 
appropriate Gestalt principles. The layout is not hard-coded, and responds to 
resizing the window.
(2/5) Some care has been invested in presentation (color, details, etc).Comment:

enhancement: 
A view showing which letters have been guessed and which have not.
Different skill levels that present different sets of words and/or make different hints available. 
